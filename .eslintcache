[{"C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\index.js":"1","C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\App.js":"2","C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\components\\index.js":"3","C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\components\\Navbar\\Navbar.js":"4","C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\components\\Navbar\\Navbar.elements.js":"5","C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\globalStyles.js":"6","C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\components\\Footer\\Footer.js":"7","C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\components\\InfoSection\\InfoSection.js":"8","C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\components\\InfoSection\\InfoSection.elements.js":"9","C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\components\\Footer\\Footer.elements.js":"10","C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\pages\\HomePage\\Home.js":"11","C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\pages\\HomePage\\Data.js":"12","C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\pages\\DataVisualizerPage\\DataViz.js":"13","C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\pages\\DataVisualizerPage\\ConvertedData.js":"14","C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\pages\\DataVisualizerPage\\SampleData.js":"15"},{"size":151,"mtime":1607172802361,"results":"16","hashOfConfig":"17"},{"size":589,"mtime":1614045801686,"results":"18","hashOfConfig":"17"},{"size":177,"mtime":1607260744787,"results":"19","hashOfConfig":"17"},{"size":2835,"mtime":1613695839187,"results":"20","hashOfConfig":"17"},{"size":3169,"mtime":1613562660395,"results":"21","hashOfConfig":"17"},{"size":1184,"mtime":1613547708980,"results":"22","hashOfConfig":"17"},{"size":181,"mtime":1607332809170,"results":"23","hashOfConfig":"17"},{"size":5149,"mtime":1613789813716,"results":"24","hashOfConfig":"17"},{"size":4002,"mtime":1613789593826,"results":"25","hashOfConfig":"17"},{"size":245,"mtime":1607332794393,"results":"26","hashOfConfig":"17"},{"size":612,"mtime":1609692691531,"results":"27","hashOfConfig":"17"},{"size":11587,"mtime":1613788700387,"results":"28","hashOfConfig":"17"},{"size":13174,"mtime":1615111695235,"results":"29","hashOfConfig":"17"},{"size":6445,"mtime":1615109805899,"results":"30","hashOfConfig":"17"},{"size":7874,"mtime":1615104817045,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"jlqu75",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"34"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\index.js",[],["69","70"],"C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\App.js",[],"C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\components\\index.js",[],"C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\components\\Navbar\\Navbar.js",["71","72","73","74","75"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  FaBars,\r\n  FaTimes,\r\n  FaGithub,\r\n  FaLinkedin,\r\n  FaChartPie,\r\n} from \"react-icons/fa\";\r\nimport { IconContext } from \"react-icons/lib\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport { HiOutlineMail } from \"react-icons/hi\";\r\n\r\nimport {\r\n  Nav,\r\n  NavbarContainer,\r\n  NavLogo,\r\n  NavIcon,\r\n  MobileIcon,\r\n  NavMenu,\r\n  NavItem,\r\n  NavLinks,\r\n  SocialIconLink,\r\n} from \"./Navbar.elements\";\r\n\r\nfunction Navbar() {\r\n  const [click, setClick] = useState(false);\r\n  const [button, setButton] = useState(true);\r\n\r\n  const handleClick = () => setClick(!click);\r\n  const closeMobileMenu = () => setClick(false);\r\n\r\n  const showButton = () => {\r\n    if (window.innerWidth <= 960) {\r\n      setButton(false);\r\n    } else {\r\n      setButton(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    showButton();\r\n  }, []);\r\n\r\n  window.addEventListener(\"resize\", showButton);\r\n\r\n  return (\r\n    <>\r\n      <IconContext.Provider value={{ color: \"#fff\" }}>\r\n        <Nav>\r\n          <NavbarContainer>\r\n            <NavLogo to=\"/\" onClick={closeMobileMenu}>\r\n              <NavIcon />\r\n              HASHIM KHANZADA\r\n            </NavLogo>\r\n            <MobileIcon onClick={handleClick}>\r\n              {click ? <FaTimes /> : <FaBars />}\r\n            </MobileIcon>\r\n            <NavMenu onClick={handleClick} click={click}>\r\n              <NavItem>\r\n                <NavLinks to=\"/DataViz\" onClick={closeMobileMenu}>\r\n                  <FaChartPie style={{ marginRight: \"5px\" }} />\r\n                  Data Visualizer\r\n                </NavLinks>\r\n              </NavItem>\r\n\r\n              <NavItem>\r\n                <SocialIconLink\r\n                  href={\"https://github.com/hashimkhanzada\"}\r\n                  target=\"_blank\"\r\n                  aria-label=\"GitHub\"\r\n                  onClick={closeMobileMenu}\r\n                >\r\n                  <FaGithub />\r\n                </SocialIconLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <SocialIconLink\r\n                  href={\"https://www.linkedin.com/in/hashim-khanzada/\"}\r\n                  target=\"_blank\"\r\n                  aria-label=\"GitHub\"\r\n                  onClick={closeMobileMenu}\r\n                >\r\n                  <FaLinkedin />\r\n                </SocialIconLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <SocialIconLink\r\n                  href={\"mailto:hashimkhanzada@gmail.com\"}\r\n                  aria-label=\"Email\"\r\n                  onClick={closeMobileMenu}\r\n                >\r\n                  <HiOutlineMail />\r\n                </SocialIconLink>\r\n              </NavItem>\r\n            </NavMenu>\r\n          </NavbarContainer>\r\n        </Nav>\r\n      </IconContext.Provider>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\components\\Navbar\\Navbar.elements.js",[],"C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\globalStyles.js",[],"C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\components\\Footer\\Footer.js",[],"C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\components\\InfoSection\\InfoSection.js",["76","77","78","79","80","81"],"import React, { useState, useEffect } from \"react\";\r\nimport { Container, Button } from \"../../globalStyles\";\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport Youtube from \"react-youtube\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\n\r\nimport {\r\n  InfoSec,\r\n  InfoRow,\r\n  InfoColumn,\r\n  TextWrapper,\r\n  TopLine,\r\n  Heading,\r\n  Subtitle,\r\n  Subtitle2,\r\n  Subtitle3,\r\n  ImgWrapper,\r\n  Img,\r\n  Skills,\r\n  ContainerHeader,\r\n  ButtonItems,\r\n  ButtonItem,\r\n  TechWrapper,\r\n  Tech,\r\n  TechImage,\r\n} from \"./InfoSection.elements\";\r\n\r\nfunction InfoSection({\r\n  id,\r\n  primary,\r\n  lightBg,\r\n  topLine,\r\n  lightTopLine,\r\n  lightText,\r\n  lightTextDesc,\r\n  techsUsed,\r\n  extraBtn,\r\n  download,\r\n  skills,\r\n  headline,\r\n  description,\r\n  description2,\r\n  description3,\r\n  btnLink1,\r\n  btnLink2,\r\n  buttonLabel,\r\n  buttonLabel2,\r\n  img,\r\n  alt,\r\n  imgStart,\r\n  start,\r\n  AboutMeHeader,\r\n  logoName,\r\n  logoName2,\r\n  logoInfo,\r\n  youtubeVideo,\r\n  youtubeUrl,\r\n  Icon,\r\n  Icon2,\r\n}) {\r\n  const [logos, setLogos] = useState([]);\r\n  const [mobileView, setMobileView] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setLogos(logoInfo);\r\n    if (window.innerWidth <= 960) {\r\n      setMobileView(false);\r\n    } else {\r\n      setMobileView(true);\r\n    }\r\n  }, []);\r\n\r\n  const opts = {\r\n    height: \"400\",\r\n    width: \"650\",\r\n    playersVars: {\r\n      autoplay: 0,\r\n    },\r\n  };\r\n\r\n  const mobileOpts = {\r\n    height: \"380\",\r\n    width: \"400\",\r\n    playersVars: {\r\n      autoplay: 0,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <InfoSec lightBg={lightBg} id={id}>\r\n        <ContainerHeader lightText={lightText}>{AboutMeHeader}</ContainerHeader>\r\n        <Container>\r\n          <InfoRow imgStart={imgStart}>\r\n            <InfoColumn>\r\n              <TextWrapper>\r\n                <TopLine lightTopLine={lightTopLine}>{topLine}</TopLine>\r\n                <Heading lightText={lightText}>{headline}</Heading>\r\n                <Subtitle lightTextDesc={lightTextDesc}>{description}</Subtitle>\r\n                <Subtitle2 lightTextDesc={lightTextDesc}>\r\n                  {description2}\r\n                </Subtitle2>\r\n                <Subtitle3 lightTextDesc={lightTextDesc}>\r\n                  {description3}\r\n                </Subtitle3>\r\n                {!techsUsed ? null : (\r\n                  <TechWrapper skills={skills}>\r\n                    {logos &&\r\n                      logos.map((logo) => {\r\n                        return (\r\n                          <Tech>\r\n                            <TechImage\r\n                              key={logo.imgUrl}\r\n                              src={logo.imgUrl}\r\n                              data-tip={logo.tipText}\r\n                              alt={\"Tech\"}\r\n                            />\r\n                            <ReactTooltip />\r\n                          </Tech>\r\n                        );\r\n                      })}\r\n                  </TechWrapper>\r\n                )}\r\n                <a\r\n                  href={btnLink1}\r\n                  target=\"_blank\"\r\n                  aria-label=\"Logo\"\r\n                  download={download}\r\n                  rel=\"noopener\"\r\n                >\r\n                  <Button fontBig primary>\r\n                    <ButtonItems>\r\n                      <ButtonItem>{Icon}</ButtonItem>\r\n                      <ButtonItem>{buttonLabel}</ButtonItem>\r\n                    </ButtonItems>\r\n                  </Button>\r\n                </a>\r\n                {!extraBtn ? null : (\r\n                  <Link to=\"./DataViz\">\r\n                    <Button fontBig primary>\r\n                      <ButtonItems>\r\n                        <ButtonItem>{Icon2}</ButtonItem>\r\n                        <ButtonItem>{buttonLabel2}</ButtonItem>\r\n                      </ButtonItems>\r\n                    </Button>\r\n                  </Link>\r\n                )}\r\n              </TextWrapper>\r\n            </InfoColumn>\r\n            <InfoColumn>\r\n              <ImgWrapper start={start} skills={skills}>\r\n                {!skills ? (\r\n                  !youtubeVideo ? (\r\n                    <Img src={img} alt={alt} />\r\n                  ) : (\r\n                    <Youtube\r\n                      videoId={youtubeUrl}\r\n                      opts={mobileView ? opts : mobileOpts}\r\n                    />\r\n                  )\r\n                ) : (\r\n                  <TechWrapper skills={skills}>\r\n                    {logos &&\r\n                      logos.map((logo) => {\r\n                        return (\r\n                          <Tech>\r\n                            <TechImage\r\n                              key={logo.imgUrl}\r\n                              src={logo.imgUrl}\r\n                              data-tip={logo.tipText}\r\n                              skills={skills}\r\n                              alt={\"Tech\"}\r\n                            />\r\n                          </Tech>\r\n                        );\r\n                      })}\r\n                  </TechWrapper>\r\n                )}\r\n              </ImgWrapper>\r\n            </InfoColumn>\r\n          </InfoRow>\r\n        </Container>\r\n      </InfoSec>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default InfoSection;\r\n","C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\components\\InfoSection\\InfoSection.elements.js",[],"C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\components\\Footer\\Footer.elements.js",[],["82","83"],"C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\pages\\HomePage\\Home.js",[],"C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\pages\\HomePage\\Data.js",["84"],"import { AiOutlineFileZip } from \"react-icons/ai\";\r\nimport { SiAzuredevops } from \"react-icons/si\";\r\n\r\nimport { FaGithub, FaFilePdf, FaYoutube, FaChartPie } from \"react-icons/fa\";\r\n\r\nexport const portfolioSection = {\r\n  id: \"portfolio\",\r\n  primary: false,\r\n  lightBg: true,\r\n  lightTopLine: false,\r\n  lightText: false,\r\n  lightTextDesc: false,\r\n  logoName: \"Github\",\r\n  logoName2: \"Data\",\r\n  topLine: \"Created with React\",\r\n  headline: \"My Portfolio Website\",\r\n  description: \"A showcase of my projects\",\r\n  buttonLabel: \"Source Code\",\r\n  btnLink1: \"https://github.com/hashimkhanzada/react-portfolio-website\",\r\n  imgStart: \"\",\r\n  img: require(\"../../images/react-logo.svg\").default,\r\n  alt: \"React Logo\",\r\n  start: \"\",\r\n  extraBtn: true,\r\n  btnLink2: \"/DataViz\",\r\n  buttonLabel2: \"Data Visualizer\",\r\n  Icon: <FaGithub />,\r\n  Icon2: <FaChartPie />,\r\n};\r\n\r\nexport const aboutMeSection = {\r\n  id: \"aboutMe\",\r\n  primary: true,\r\n  lightBg: false,\r\n  lightTopLine: true,\r\n  lightText: true,\r\n  lightTextDesc: true,\r\n  skills: true,\r\n  techsUsed: false,\r\n  logoName: \"Resume\",\r\n  AboutMeHeader: \"ABOUT ME\",\r\n  headline: \"Full-stack .NET developer\",\r\n  description:\r\n    \"A software engineering graduate of UCOL, with a passion for developing exciting software.\",\r\n  description2:\r\n    \"A fast learner with strong time management and problem solving skills. I've successfully worked on multiple team projects during my degree, where communication skills and teamwork is essential. \",\r\n  buttonLabel: \"View Resume\",\r\n  btnLink1: require(\"../../images/hashim-cv.pdf\").default,\r\n  imgStart: \"start\",\r\n  logoInfo: [\r\n    {\r\n      imgUrl: require(\"../../images/dotnet.svg\").default,\r\n      tipText: \".Net Core\",\r\n    },\r\n    {\r\n      imgUrl: require(\"../../images/csharp.svg\").default,\r\n      tipText: \"C Sharp\",\r\n    },\r\n    {\r\n      imgUrl: require(\"../../images/react.svg\").default,\r\n      tipText: \"React Js\",\r\n    },\r\n    {\r\n      imgUrl: require(\"../../images/redux.svg\").default,\r\n      tipText: \"Redux\",\r\n    },\r\n    {\r\n      imgUrl: require(\"../../images/sql.svg\").default,\r\n      tipText: \"SQL Server\",\r\n    },\r\n\r\n    {\r\n      imgUrl: require(\"../../images/jquery.svg\").default,\r\n      tipText: \"jQuery\",\r\n    },\r\n\r\n    {\r\n      imgUrl: require(\"../../images/html.svg\").default,\r\n      tipText: \"HTML\",\r\n    },\r\n    {\r\n      imgUrl: require(\"../../images/css.svg\").default,\r\n      tipText: \"CSS\",\r\n    },\r\n    {\r\n      imgUrl: require(\"../../images/javascript.svg\").default,\r\n      tipText: \"JavaScript\",\r\n    },\r\n    {\r\n      imgUrl: require(\"../../images/typescript.svg\").default,\r\n      tipText: \"TypeScript\",\r\n    },\r\n    {\r\n      imgUrl: require(\"../../images/azure.svg\").default,\r\n      tipText: \"Azure\",\r\n    },\r\n    {\r\n      imgUrl: require(\"../../images/firebase.svg\").default,\r\n      tipText: \"Firebase\",\r\n    },\r\n    {\r\n      imgUrl: require(\"../../images/vue.svg\").default,\r\n      tipText: \"Vue Js\",\r\n    },\r\n    {\r\n      imgUrl: require(\"../../images/kotlin.svg\").default,\r\n      tipText: \"Kotlin\",\r\n    },\r\n    {\r\n      imgUrl: require(\"../../images/materialui.svg\").default,\r\n      tipText: \"Material UI\",\r\n    },\r\n    {\r\n      imgUrl: require(\"../../images/xamarin.svg\").default,\r\n      tipText: \"Xamarin\",\r\n    },\r\n\r\n    {\r\n      imgUrl: require(\"../../images/java.svg\").default,\r\n      tipText: \"Java\",\r\n    },\r\n\r\n    {\r\n      imgUrl: require(\"../../images/dapper.svg\").default,\r\n      tipText: \"Dapper\",\r\n    },\r\n\r\n    {\r\n      imgUrl: require(\"../../images/efcore.svg\").default,\r\n      tipText: \"Entity Framework Core\",\r\n    },\r\n    {\r\n      imgUrl: require(\"../../images/git-icon.svg\").default,\r\n      tipText: \"Git\",\r\n    },\r\n  ],\r\n\r\n  alt: \"Skills\",\r\n  start: \"true\",\r\n  Icon: <FaFilePdf />,\r\n};\r\n\r\nexport const dietTrackerSection = {\r\n  id: \"dietTracker\",\r\n  primary: false,\r\n  lightBg: true,\r\n  lightTopLine: false,\r\n  lightText: false,\r\n  lightTextDesc: false,\r\n  techsUsed: true,\r\n  logoName: \"Github\",\r\n  logoName2: \"Youtube\",\r\n  youtubeVideo: true,\r\n  youtubeUrl: \"h5HO1Ii3xj8\",\r\n  topLine: \"Industry Project - sponsored by UCOL\",\r\n  headline: \"Diet Tracking Software\",\r\n  description:\r\n    \"A diet tracking web application that utilizes the NzFoodFiles database and FatSecret API. \" +\r\n    \"Users can search these extensive databases for food items, to track their nutrition. \",\r\n  description2:\r\n    \"Users can use the in-built nutrient calculator to set goals, view a daily/weekly summary of their intakes, and export summaries in a csv format.\",\r\n  description3: \"Technologies used:\",\r\n  buttonLabel: \"Source Code\",\r\n  buttonLabel2: \"Demo\",\r\n  btnLink1: \"https://github.com/hashimkhanzada/Nutritional_Software\",\r\n  imgStart: \"\",\r\n  img: require(\"../../images/food.svg\").default,\r\n  logoInfo: [\r\n    {\r\n      imgUrl: require(\"../../images/dotnet.svg\").default,\r\n      tipText: \".Net Core\",\r\n    },\r\n    {\r\n      imgUrl: require(\"../../images/csharp.svg\").default,\r\n      tipText: \"C Sharp\",\r\n    },\r\n    {\r\n      imgUrl: require(\"../../images/sql.svg\").default,\r\n      tipText: \"SQL Server\",\r\n    },\r\n    {\r\n      imgUrl: require(\"../../images/jquery.svg\").default,\r\n      tipText: \"jQuery\",\r\n    },\r\n    {\r\n      imgUrl: require(\"../../images/javascript.svg\").default,\r\n      tipText: \"JavaScript\",\r\n    },\r\n    {\r\n      imgUrl: require(\"../../images/efcore.svg\").default,\r\n      tipText: \"Entity Framework Core\",\r\n    },\r\n    {\r\n      imgUrl: require(\"../../images/azure.svg\").default,\r\n      tipText: \"Azure\",\r\n    },\r\n  ],\r\n  start: \"\",\r\n  Icon: <FaGithub />,\r\n};\r\n\r\nexport const planStudyOptionsSection = {\r\n  id: \"planStudyOptions\",\r\n  primary: false,\r\n  lightBg: true,\r\n  lightTopLine: false,\r\n  lightText: false,\r\n  lightTextDesc: false,\r\n  techsUsed: true,\r\n  logoName: \"Github\",\r\n  topLine: \"WPF | Caliburn Micro\",\r\n  headline: \"Plan Study Options\",\r\n  description:\r\n    \"A desktop application to aid UCOL BICT (Bachelor's in ICT) students in planning their study options. Gives students the available list of courses, calculates their credits, and shows them the courses they're eligible for based on the major they choose.\",\r\n  description2:\r\n    \"Uses Caliburn Micro as its MVVM framework, and Simple Container as its dependency injection system. Dapper is used as the ORM. Material Design XAML is used to style the UI components.\",\r\n  description3: \"Technologies used:\",\r\n  buttonLabel: \"Source Code\",\r\n  btnLink1: \"https://github.com/hashimkhanzada/WPF.PlanStudyOptions\",\r\n  imgStart: \"\",\r\n  img: require(\"../../images/books.svg\").default,\r\n\r\n  logoInfo: [\r\n    {\r\n      imgUrl: require(\"../../images/dotnet.svg\").default,\r\n      tipText: \".Net Core\",\r\n    },\r\n    {\r\n      imgUrl: require(\"../../images/csharp.svg\").default,\r\n      tipText: \"C Sharp\",\r\n    },\r\n    {\r\n      imgUrl: require(\"../../images/sql.svg\").default,\r\n      tipText: \"SQL Server\",\r\n    },\r\n    {\r\n      imgUrl: require(\"../../images/caliburnmicro.svg\").default,\r\n      tipText: \"Caliburn Micro\",\r\n    },\r\n    {\r\n      imgUrl: require(\"../../images/dapper.svg\").default,\r\n      tipText: \"Dapper\",\r\n    },\r\n    {\r\n      imgUrl: require(\"../../images/materialdesignxaml.svg\").default,\r\n      tipText: \"Material Design XAML\",\r\n    },\r\n  ],\r\n  alt: \"Skills\",\r\n  start: \"\",\r\n  Icon: <FaGithub />,\r\n};\r\n\r\nexport const vueApp = {\r\n  id: \"vueApp\",\r\n  primary: false,\r\n  lightBg: true,\r\n  lightTopLine: false,\r\n  lightText: false,\r\n  lightTextDesc: false,\r\n  techsUsed: true,\r\n  logoName: \"Azure\",\r\n  logoName2: \"Youtube\",\r\n  youtubeVideo: true,\r\n  youtubeUrl: \"lmg2hHx8lVA\",\r\n  topLine: \"VueJs | Vuetify\",\r\n  headline: \"Single Page Application\",\r\n  description:\r\n    \"A responsive SPA created with Vue, styled with Vuetify.  \" +\r\n    \"It uses firebase google authentication to allow users to sign in with their google account.\",\r\n  description2:\r\n    \"It has an inventory that contains Vue components, allowing the users to perform CRUD operations, using the browsers local storage. \",\r\n  description3: \"Technologies used:\",\r\n  buttonLabel: \"Source Code\",\r\n  buttonLabel2: \"Demo\",\r\n  btnLink1: \"https://dev.azure.com/hashimkhanzada/VueJs\",\r\n  imgStart: \"\",\r\n  img: require(\"../../images/onboard.svg\").default,\r\n\r\n  logoInfo: [\r\n    {\r\n      imgUrl: require(\"../../images/vue.svg\").default,\r\n      tipText: \"Vue Js\",\r\n    },\r\n    {\r\n      imgUrl: require(\"../../images/vuetify.svg\").default,\r\n      tipText: \"Vuetify\",\r\n    },\r\n    {\r\n      imgUrl: require(\"../../images/firebase.svg\").default,\r\n      tipText: \"Firebase\",\r\n    },\r\n  ],\r\n\r\n  alt: \"Skills\",\r\n  start: \"\",\r\n  Icon: <SiAzuredevops />,\r\n};\r\n\r\nexport const tuckbox = {\r\n  id: \"tuckbox\",\r\n  primary: true,\r\n  lightBg: false,\r\n  lightTopLine: true,\r\n  lightText: true,\r\n  lightTextDesc: true,\r\n  techsUsed: true,\r\n  download: true,\r\n  logoName: \"Zip\",\r\n  logoName2: \"Youtube\",\r\n  youtubeVideo: true,\r\n  youtubeUrl: \"8MQ8BU053t8\",\r\n  topLine: \"JAVA | KOTLIN\",\r\n  headline: \"TUCKBOX\",\r\n  description:\r\n    \"An android application for placing/managing lunch delivery orders. Uses firebase firestore as its remote database, and ROOM as its ORM.\",\r\n  description2:\r\n    \"Allows users to register/login, place/manage delivery orders, and manage their profiles.\",\r\n  description3: \"Technologies used:\",\r\n  buttonLabel: \"Download ZIP\",\r\n  buttonLabel2: \"Demo\",\r\n  btnLink1: require(\"../../images/TuckBox.zip\").default,\r\n  imgStart: \"\",\r\n  img: require(\"../../images/phonelogo.svg\").default,\r\n\r\n  logoInfo: [\r\n    {\r\n      imgUrl: require(\"../../images/java.svg\").default,\r\n      tipText: \"Java\",\r\n    },\r\n    {\r\n      imgUrl: require(\"../../images/kotlin.svg\").default,\r\n      tipText: \"Kotlin\",\r\n    },\r\n    {\r\n      imgUrl: require(\"../../images/firebase.svg\").default,\r\n      tipText: \"Firebase\",\r\n    },\r\n    {\r\n      imgUrl: require(\"../../images/android.svg\").default,\r\n      tipText: \"Android\",\r\n    },\r\n    {\r\n      imgUrl: require(\"../../images/materialui.svg\").default,\r\n      tipText: \"Material UI\",\r\n    },\r\n  ],\r\n\r\n  alt: \"Skills\",\r\n  start: \"\",\r\n  Icon: <AiOutlineFileZip />,\r\n};\r\n\r\nexport const intercity = {\r\n  id: \"intercity\",\r\n  primary: true,\r\n  lightBg: false,\r\n  lightTopLine: true,\r\n  lightText: true,\r\n  lightTextDesc: true,\r\n  techsUsed: true,\r\n  logoName: \"Github\",\r\n  youtubeVideo: true,\r\n  youtubeUrl: \"h4NJGhGGyrI\",\r\n  // logoName2: \"Youtube\",\r\n  // extraBtn: true,\r\n  topLine: \".NET Web API | React\",\r\n  headline: \"InterCity Clone\",\r\n  description:\r\n    \"An InterCity clone web application built with React and .NET 5 Web API. Users are able to search for trips and book them accordingly. They can also manage their bookings using a unique reference number provided to them.\",\r\n\r\n  description3: \"Technologies used:\",\r\n  buttonLabel: \"Source Code\",\r\n  btnLink1: \"https://github.com/hashimkhanzada/InterCityClone\",\r\n  imgStart: \"\",\r\n  img: require(\"../../images/travel.svg\").default,\r\n\r\n  logoInfo: [\r\n    {\r\n      imgUrl: require(\"../../images/dotnet.svg\").default,\r\n      tipText: \".Net Core\",\r\n    },\r\n    {\r\n      imgUrl: require(\"../../images/csharp.svg\").default,\r\n      tipText: \"C Sharp\",\r\n    },\r\n    {\r\n      imgUrl: require(\"../../images/react.svg\").default,\r\n      tipText: \"React\",\r\n    },\r\n\r\n    {\r\n      imgUrl: require(\"../../images/javascript.svg\").default,\r\n      tipText: \"JavaScript\",\r\n    },\r\n    {\r\n      imgUrl: require(\"../../images/typescript.svg\").default,\r\n      tipText: \"TypeScript\",\r\n    },\r\n    {\r\n      imgUrl: require(\"../../images/sql.svg\").default,\r\n      tipText: \"SQL Server\",\r\n    },\r\n    {\r\n      imgUrl: require(\"../../images/efcore.svg\").default,\r\n      tipText: \"Entity Framework\",\r\n    },\r\n  ],\r\n\r\n  alt: \"Skills\",\r\n  start: \"\",\r\n  Icon: <FaGithub />,\r\n};\r\n","C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\pages\\DataVisualizerPage\\DataViz.js",["85","86","87","88","89","90","91","92","93","94","95","96","97"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport { parse } from \"papaparse\";\r\nimport styled from \"styled-components\";\r\nimport { ConvertedData } from \"./ConvertedData\";\r\nimport { Button } from \"../../globalStyles\";\r\nimport \"./DataViz.css\";\r\nimport SampleData from \"./SampleData\";\r\n\r\nconst DataViz = () => {\r\n  const dataRef = useRef(null);\r\n  const [dimensions, setDimensions] = useState();\r\n  const [highlighted, setHighlighted] = useState(false);\r\n  const [columnNames, setColumnNames] = useState([]);\r\n  const [numberColumnNames, setNumberColumnNames] = useState([]);\r\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\r\n  const [importedData, setImportedData] = useState([]);\r\n  const [largestCircle, setLargestCircle] = useState(0);\r\n  const [isNumberColumn, setIsNumberColumn] = useState(false);\r\n  const [largestRadius, setLargestRadius] = useState(0);\r\n  const [bodyInfo, setBodyInfo] = useState();\r\n  const [introData, setIntroData] = useState(\r\n    \"A basic data visualizer that converts data from a .CSV file and displays them as movable objects.\"\r\n  );\r\n  const [groupByColumn, setGroupByColumn] = useState();\r\n  const [groupedColumnNames, setGroupedColumnNames] = useState([]);\r\n  const [selectedGroupColumn, setSelectedGroupColumn] = useState();\r\n  const [groupedColumnData, setGroupedColumnData] = useState();\r\n\r\n  useEffect(() => {\r\n    let dimen = dataRef.current.getBoundingClientRect();\r\n    setDimensions({ width: dimen.width, height: dimen.height });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (importedData.length > 0) {\r\n      const keys = Object.keys(importedData[0]);\r\n      setColumnNames(keys);\r\n\r\n      let names = [...keys];\r\n\r\n      importedData.forEach((element) => {\r\n        Object.keys(element).forEach((key) => {\r\n          if (isNaN(element[key])) {\r\n            if (names.includes(key)) {\r\n              const index = names.indexOf(key);\r\n              if (index > -1) {\r\n                names.splice(index, 1);\r\n              }\r\n            }\r\n          }\r\n        });\r\n      });\r\n\r\n      setNumberColumnNames(names);\r\n    }\r\n  }, [importedData]);\r\n\r\n  useEffect(() => {\r\n    if (dimensions && importedData) {\r\n      let addArray = [];\r\n      let largestNum = Math.max.apply(\r\n        Math,\r\n        importedData.map((o) => {\r\n          addArray.push(Math.floor(o[selectedColumn]));\r\n          return o[selectedColumn];\r\n        })\r\n      );\r\n      let sum = addArray.reduce((a, b) => a + b, 0);\r\n      let multi = 1.2;\r\n      let maxRadius = 170;\r\n\r\n      if (window.innerWidth < 1100) {\r\n        multi = 1.7;\r\n      }\r\n\r\n      let allowedRad = Math.floor(\r\n        (dimensions.width + dimensions.height) / multi\r\n      );\r\n      let totalRad = Math.floor((sum / largestNum) * maxRadius);\r\n\r\n      while (totalRad > allowedRad) {\r\n        maxRadius -= 2;\r\n        totalRad = Math.floor((sum / largestNum) * maxRadius);\r\n      }\r\n\r\n      setLargestRadius(maxRadius);\r\n      setIsNumberColumn(false);\r\n\r\n      if (Number.isInteger(Math.floor(largestNum))) {\r\n        setIsNumberColumn(true);\r\n        setIntroData(\"Click on an object to display related data\");\r\n      } else {\r\n        setBodyInfo(\"\");\r\n      }\r\n\r\n      setLargestCircle(largestNum);\r\n    }\r\n\r\n    if (selectedColumn) {\r\n      let tempArr = [...columnNames];\r\n      tempArr.sort();\r\n      const index = tempArr.indexOf(selectedColumn);\r\n      let item = tempArr.splice(index, 1);\r\n      tempArr.splice(0, 0, item[0]);\r\n\r\n      setColumnNames(tempArr);\r\n    }\r\n  }, [selectedColumn, dimensions]);\r\n\r\n  const displayData = (b) => {\r\n    setBodyInfo(b);\r\n  };\r\n\r\n  const convertFiles = (x) => {\r\n    setHighlighted(false);\r\n\r\n    Array.from(x)\r\n      .filter((file) => file.type === \"application/vnd.ms-excel\")\r\n      .forEach(async (file) => {\r\n        const text = await file.text();\r\n\r\n        const result = parse(text, {\r\n          header: true,\r\n          skipEmptyLines: true,\r\n          preview: 50,\r\n        });\r\n\r\n        setImportedData(result.data);\r\n        setIntroData(\r\n          \"Only columns that contain numbers can be displayed as objects. Refresh the page if any performance issues occur.\"\r\n        );\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (groupByColumn && groupByColumn != \"AllData\") {\r\n      let group = importedData.reduce((r, a) => {\r\n        r[a[groupByColumn]] = [...(r[a[groupByColumn]] || []), a];\r\n        return r;\r\n      }, {});\r\n      let nameOfColumns = [];\r\n      const cols = Object.keys(group).map((item) => {\r\n        nameOfColumns.push(item);\r\n      });\r\n\r\n      setGroupedColumnNames(nameOfColumns);\r\n    }\r\n  }, [groupByColumn]);\r\n\r\n  useEffect(() => {\r\n    if (groupByColumn != \"AllData\") {\r\n      const result = importedData.filter(\r\n        (word) => word[groupByColumn] == selectedGroupColumn\r\n      );\r\n      setGroupedColumnData(result);\r\n    }\r\n  }, [selectedGroupColumn]);\r\n\r\n  useEffect(() => {\r\n    if (groupByColumn == \"AllData\") {\r\n      setGroupedColumnData(importedData);\r\n    }\r\n  }, [groupByColumn]);\r\n\r\n  return (\r\n    <MainContainer\r\n      onDragOver={(e) => {\r\n        e.preventDefault();\r\n      }}\r\n      onDrop={(e) => {\r\n        e.preventDefault();\r\n        convertFiles(e.dataTransfer.files);\r\n      }}\r\n    >\r\n      <LeftColumn\r\n        highlighted={highlighted}\r\n        onDragEnter={() => {\r\n          setHighlighted(true);\r\n        }}\r\n        onDragLeave={() => {\r\n          setHighlighted(false);\r\n        }}\r\n      >\r\n        <BodyContainer>\r\n          <SelectBlock>\r\n            {importedData.length == 0 && (\r\n              <>\r\n                <input\r\n                  type=\"file\"\r\n                  onChange={(e) => {\r\n                    convertFiles(e.target.files);\r\n                  }}\r\n                  style={{\r\n                    marginBottom: \"20px\",\r\n                    borderRadius: \"5px\",\r\n                    width: \"100%\",\r\n                  }}\r\n                />\r\n                <Button\r\n                  primary\r\n                  fontBig\r\n                  onClick={() => {\r\n                    setImportedData(SampleData);\r\n                    // console.log(SampleData);\r\n                    setIntroData(\r\n                      \"Only columns that contain numbers can be displayed as objects. Refresh the page if any performance issues occur.\"\r\n                    );\r\n                  }}\r\n                  style={{\r\n                    marginBottom: \"20px\",\r\n                  }}\r\n                >\r\n                  Load Sample Data\r\n                </Button>\r\n              </>\r\n            )}\r\n            {importedData.length > 0 && (\r\n              <>\r\n                <SelectInput\r\n                  style={{ width: \"100%\" }}\r\n                  onChange={(e) => {\r\n                    setSelectedColumn(e.target.value);\r\n                    setGroupByColumn(\"AllData\");\r\n                  }}\r\n                >\r\n                  <option value=\"\" defaultValue>\r\n                    - select a column to display -\r\n                  </option>\r\n                  {numberColumnNames &&\r\n                    numberColumnNames.map((data) => {\r\n                      return (\r\n                        <option key={data} value={data}>\r\n                          {data}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </SelectInput>\r\n                {selectedColumn && (\r\n                  <>\r\n                    <SelectInput\r\n                      key={selectedColumn}\r\n                      style={{ width: \"100%\" }}\r\n                      onChange={(e) => {\r\n                        setGroupByColumn(e.target.value);\r\n                      }}\r\n                    >\r\n                      <option value=\"\" defaultValue>\r\n                        - select a column to group by -\r\n                      </option>\r\n                      <option value=\"AllData\">Show All</option>\r\n                      {columnNames &&\r\n                        columnNames.map((data) => {\r\n                          return (\r\n                            <option key={data} value={data}>\r\n                              {data}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                    </SelectInput>\r\n                    {groupByColumn && groupByColumn != \"AllData\" && (\r\n                      <SelectInput\r\n                        style={{ width: \"100%\" }}\r\n                        onChange={(e) => {\r\n                          setSelectedGroupColumn(e.target.value);\r\n                        }}\r\n                      >\r\n                        <option value=\"\" defaultValue>\r\n                          - Select the {groupByColumn} -\r\n                        </option>\r\n\r\n                        {groupedColumnNames &&\r\n                          groupedColumnNames.map((group) => {\r\n                            return (\r\n                              <option key={group} value={group}>\r\n                                {group}\r\n                              </option>\r\n                            );\r\n                          })}\r\n                      </SelectInput>\r\n                    )}\r\n                  </>\r\n                )}\r\n              </>\r\n            )}\r\n          </SelectBlock>\r\n\r\n          <BodyData className=\"scrollBar\">\r\n            {bodyInfo ? (\r\n              columnNames?.map((data) => {\r\n                return (\r\n                  <BodyItem key={data}>\r\n                    <h4>{data}:</h4>\r\n                    <p>{bodyInfo[data]}</p>\r\n                  </BodyItem>\r\n                );\r\n              })\r\n            ) : (\r\n              <BodyItem>\r\n                <p>{introData}</p>\r\n              </BodyItem>\r\n            )}\r\n          </BodyData>\r\n        </BodyContainer>\r\n      </LeftColumn>\r\n      <RightColumn ref={dataRef}>\r\n        {groupedColumnData?.length > 0 && isNumberColumn ? (\r\n          <ConvertedData\r\n            key={groupedColumnData + selectedColumn}\r\n            circleData={groupedColumnData}\r\n            largestCircle={largestCircle}\r\n            selectedColumn={selectedColumn}\r\n            maxRadius={largestRadius}\r\n            showCircleData={displayData}\r\n          />\r\n        ) : (\r\n          importedData.length == 0 && (\r\n            <h1\r\n              style={{ color: \"gray\", textAlign: \"center\", marginTop: \"2vh\" }}\r\n            >\r\n              Drag and Drop a .CSV file\r\n            </h1>\r\n          )\r\n        )}\r\n      </RightColumn>\r\n    </MainContainer>\r\n  );\r\n};\r\n\r\nexport default DataViz;\r\n\r\nconst MainContainer = styled.div`\r\n  display: flex;\r\n  height: calc(100vh - 80px);\r\n  background-color: #4b59f7;\r\n  width: 100%;\r\n  color: white;\r\n\r\n  @media screen and (max-width: 1100px) {\r\n    flex-direction: column;\r\n    height: 100%;\r\n  }\r\n`;\r\n\r\nconst RightColumn = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex: 0.75;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: #fff;\r\n\r\n  @media screen and (max-width: 1100px) {\r\n  }\r\n`;\r\n\r\nconst LeftColumn = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex: 0.25;\r\n  background-color: ${({ highlighted }) =>\r\n    highlighted ? \"#4C5D6B\" : \"#3b4954\"};\r\n\r\n  @media screen and (max-width: 1100px) {\r\n  }\r\n`;\r\n\r\nconst SelectBlock = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  margin: 15px 20px;\r\n  @media screen and (max-width: 1100px) {\r\n  }\r\n`;\r\n\r\nconst SelectInput = styled.select`\r\n  color: #a0b0bb;\r\n  background-color: #3b4954;\r\n  text-transform: capitalize;\r\n  font-size: 22px;\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n\r\n  option {\r\n    color: #fff;\r\n  }\r\n  &:focus {\r\n    outline-width: 0;\r\n  }\r\n`;\r\n\r\nconst BodyContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: left;\r\n  overflow: hidden;\r\n\r\n  @media screen and (max-width: 1100px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst BodyData = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: left;\r\n  overflow-y: auto;\r\n\r\n  @media screen and (max-width: 1100px) {\r\n    flex-direction: row;\r\n    overflow-x: auto;\r\n    overflow-y: hidden;\r\n    height: 100%;\r\n    margin-bottom: 20px;\r\n  }\r\n`;\r\n\r\nconst BodyItem = styled.div`\r\n  padding: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: left;\r\n  border-top: solid 1px #2a343c;\r\n\r\n  &:first-child {\r\n    border-top: solid 1px #4b59f7;\r\n    background-color: #4b59f7;\r\n\r\n    &:hover {\r\n      transition: all 0.3s ease-out;\r\n      background: #0467fb;\r\n    }\r\n  }\r\n\r\n  &:nth-child(2) {\r\n    border-top: solid 1px #4b59f7;\r\n    @media screen and (max-width: 1100px) {\r\n      border-top: solid 1px #2a343c;\r\n    }\r\n  }\r\n\r\n  &:hover {\r\n    transition: all 0.3s ease-out;\r\n    background: #2a343c;\r\n  }\r\n\r\n  h4 {\r\n    font-size: 22px;\r\n    font-weight: normal;\r\n    text-transform: capitalize;\r\n    margin-bottom: 4px;\r\n    @media screen and (max-width: 1100px) {\r\n      margin-top: 5px;\r\n    }\r\n  }\r\n\r\n  p {\r\n    font-size: 17px;\r\n    align-self: right;\r\n  }\r\n\r\n  @media screen and (max-width: 1100px) {\r\n    flex-direction: column;\r\n    justify-content: normal;\r\n    border-right: solid 1px #2a343c;\r\n    padding: 10px 25px;\r\n    border-bottom: solid 1px #2a343c;\r\n  }\r\n`;\r\n","C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\pages\\DataVisualizerPage\\ConvertedData.js",["98","99"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport Matter from \"matter-js\";\r\nimport MatterAttractors from \"matter-attractors\";\r\n\r\nconst PARTICLE_BOUNCYNESS = 0.1;\r\n\r\nexport const ConvertedData = ({\r\n  circleData,\r\n  largestCircle,\r\n  selectedColumn,\r\n  maxRadius,\r\n  showCircleData,\r\n}) => {\r\n  const [importedCircleData] = useState(circleData);\r\n  const boxRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n  const [constraints, setContraints] = useState();\r\n  const [scene, setScene] = useState();\r\n  const [someStateValue, setSomeStateValue] = useState(false);\r\n  const [firstBall, setFirstBall] = useState(false);\r\n\r\n  useEffect(() => {\r\n    importedCircleData.forEach((element) => {\r\n      setSomeStateValue(!someStateValue);\r\n    });\r\n  }, [importedCircleData]);\r\n\r\n  useEffect(() => {\r\n    let Engine = Matter.Engine;\r\n    let Render = Matter.Render;\r\n    let World = Matter.World;\r\n    let Bodies = Matter.Bodies;\r\n    let engine = Engine.create({});\r\n\r\n    Matter.use(MatterAttractors);\r\n\r\n    let render = Render.create({\r\n      element: boxRef.current,\r\n      engine: engine,\r\n      canvas: canvasRef.current,\r\n      options: {\r\n        background: \"white\",\r\n        wireframes: false,\r\n      },\r\n    });\r\n\r\n    const floor = Bodies.rectangle(0, 0, 10, 10, {\r\n      isStatic: true,\r\n      render: {\r\n        visible: false,\r\n      },\r\n    });\r\n\r\n    World.add(engine.world, [\r\n      floor,\r\n      Bodies.rectangle(0, 0, 10, 10, {\r\n        isStatic: true,\r\n        render: {\r\n          visible: false,\r\n        },\r\n      }),\r\n      Bodies.rectangle(0, 0, 10, 10, {\r\n        isStatic: true,\r\n        render: {\r\n          visible: false,\r\n        },\r\n      }),\r\n      Bodies.rectangle(0, 0, 10, 10, {\r\n        isStatic: true,\r\n        render: {\r\n          visible: false,\r\n        },\r\n      }),\r\n    ]);\r\n    Engine.run(engine);\r\n    Render.run(render);\r\n\r\n    setContraints(boxRef.current.getBoundingClientRect());\r\n    setScene(render);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (constraints) {\r\n      let { width, height } = constraints;\r\n\r\n      scene.bounds.max.x = width;\r\n      scene.bounds.max.y = height;\r\n      scene.options.width = width;\r\n      scene.options.height = height;\r\n      scene.canvas.width = width;\r\n      scene.canvas.height = height;\r\n\r\n      const floor = scene.engine.world.bodies[0];\r\n      const roof = scene.engine.world.bodies[1];\r\n      const rightWall = scene.engine.world.bodies[2];\r\n      const leftWall = scene.engine.world.bodies[3];\r\n\r\n      Matter.Body.setPosition(floor, {\r\n        x: width / 2,\r\n        y: height,\r\n      });\r\n\r\n      Matter.Body.setPosition(roof, {\r\n        x: width / 2,\r\n        y: height - height,\r\n      });\r\n\r\n      Matter.Body.setPosition(rightWall, {\r\n        x: width,\r\n        y: height / 2,\r\n      });\r\n\r\n      Matter.Body.setPosition(leftWall, {\r\n        x: width - width,\r\n        y: height / 2,\r\n      });\r\n\r\n      Matter.Body.setVertices(floor, [\r\n        { x: 0, y: height },\r\n        { x: width, y: height },\r\n        { x: width, y: height + 1 },\r\n        { x: 0, y: height + 1 },\r\n      ]);\r\n\r\n      Matter.Body.setVertices(roof, [\r\n        { x: 0, y: height },\r\n        { x: width, y: height },\r\n        { x: width, y: height + 1 },\r\n        { x: 0, y: height + 1 },\r\n      ]);\r\n\r\n      Matter.Body.setVertices(leftWall, [\r\n        { x: 0, y: 0 },\r\n        { x: 1, y: 0 },\r\n        { x: 1, y: height },\r\n        { x: 0, y: height },\r\n      ]);\r\n\r\n      Matter.Body.setVertices(rightWall, [\r\n        { x: 0, y: 0 },\r\n        { x: 1, y: 0 },\r\n        { x: 1, y: height },\r\n        { x: 0, y: height },\r\n      ]);\r\n\r\n      scene.engine.world.gravity.x = 0;\r\n      scene.engine.world.gravity.y = 0;\r\n      scene.engine.world.gravity.isPoint = true;\r\n    }\r\n  }, [scene, constraints]);\r\n\r\n  useEffect(() => {\r\n    if (scene) {\r\n      let { width, height } = constraints;\r\n      let centerX = width / 2;\r\n      let centerY = height / 2;\r\n\r\n      if (!firstBall) {\r\n        let attractiveBody = Matter.Bodies.circle(centerX, centerY, 0, {\r\n          isStatic: true,\r\n          restitution: PARTICLE_BOUNCYNESS,\r\n          plugin: {\r\n            attractors: [\r\n              (bodyA, bodyB) => {\r\n                return {\r\n                  x: (bodyA.position.x - bodyB.position.x) * 1e-6,\r\n                  y: (bodyA.position.y - bodyB.position.y) * 1e-6,\r\n                };\r\n              },\r\n            ],\r\n          },\r\n        });\r\n\r\n        Matter.World.add(scene.engine.world, attractiveBody);\r\n\r\n        setFirstBall(true);\r\n      }\r\n\r\n      importedCircleData.forEach((element) => {\r\n        if (element[selectedColumn]) {\r\n          let randomX = Math.floor(Math.random() * -width) + width;\r\n          let randomY = Math.floor(Math.random() * -height) + height;\r\n\r\n          let bodySize = Math.floor(\r\n            (element[selectedColumn] / largestCircle) * maxRadius\r\n          );\r\n\r\n          let normalBody = Matter.Bodies.circle(randomX, randomY, bodySize, {\r\n            label: element,\r\n            restitution: PARTICLE_BOUNCYNESS,\r\n          });\r\n\r\n          Matter.World.add(scene.engine.world, normalBody);\r\n        }\r\n      });\r\n\r\n      scene.mouse = Matter.Mouse.create(scene.canvas);\r\n      let mouseInteractivity = Matter.MouseConstraint.create(scene.engine, {\r\n        mouse: scene.mouse,\r\n        constraint: {\r\n          stiffness: 0.2,\r\n          render: { visible: false },\r\n        },\r\n      });\r\n\r\n      Matter.World.add(scene.engine.world, mouseInteractivity);\r\n\r\n      Matter.Events.on(mouseInteractivity, \"mousedown\", (event) => {\r\n        let mouseConstraint = event.source;\r\n        let bodies = scene.engine.world.bodies;\r\n\r\n        if (!mouseConstraint.bodyB) {\r\n          for (let i = 0; i < bodies.length; i++) {\r\n            let body = bodies[i];\r\n            if (\r\n              Matter.Bounds.contains(\r\n                body.bounds,\r\n                mouseConstraint.mouse.position\r\n              )\r\n            ) {\r\n              showCircleData(body?.label);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }, [someStateValue]);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        position: \"relative\",\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n      }}\r\n    >\r\n      <div\r\n        ref={boxRef}\r\n        style={{\r\n          width: \"100%\",\r\n          height: \"100%\",\r\n        }}\r\n      >\r\n        <canvas ref={canvasRef} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\pages\\DataVisualizerPage\\SampleData.js",[],{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":10,"column":27,"nodeType":"106","messageId":"107","endLine":10,"endColumn":33},{"ruleId":"104","severity":1,"message":"108","line":10,"column":35,"nodeType":"106","messageId":"107","endLine":10,"endColumn":41},{"ruleId":"104","severity":1,"message":"109","line":10,"column":43,"nodeType":"106","messageId":"107","endLine":10,"endColumn":48},{"ruleId":"104","severity":1,"message":"110","line":10,"column":50,"nodeType":"106","messageId":"107","endLine":10,"endColumn":54},{"ruleId":"104","severity":1,"message":"111","line":27,"column":10,"nodeType":"106","messageId":"107","endLine":27,"endColumn":16},{"ruleId":"104","severity":1,"message":"105","line":5,"column":27,"nodeType":"106","messageId":"107","endLine":5,"endColumn":33},{"ruleId":"104","severity":1,"message":"108","line":5,"column":35,"nodeType":"106","messageId":"107","endLine":5,"endColumn":41},{"ruleId":"104","severity":1,"message":"109","line":5,"column":43,"nodeType":"106","messageId":"107","endLine":5,"endColumn":48},{"ruleId":"104","severity":1,"message":"112","line":19,"column":3,"nodeType":"106","messageId":"107","endLine":19,"endColumn":9},{"ruleId":"113","severity":1,"message":"114","line":71,"column":6,"nodeType":"115","endLine":71,"endColumn":8,"suggestions":"116"},{"ruleId":"117","severity":1,"message":"118","line":126,"column":19,"nodeType":"119","endLine":126,"endColumn":34},{"ruleId":"100","replacedBy":"120"},{"ruleId":"102","replacedBy":"121"},{"ruleId":"104","severity":1,"message":"122","line":4,"column":31,"nodeType":"106","messageId":"107","endLine":4,"endColumn":40},{"ruleId":"113","severity":1,"message":"123","line":108,"column":6,"nodeType":"115","endLine":108,"endColumn":34,"suggestions":"124"},{"ruleId":"125","severity":1,"message":"126","line":136,"column":40,"nodeType":"127","messageId":"128","endLine":136,"endColumn":42},{"ruleId":"104","severity":1,"message":"129","line":142,"column":13,"nodeType":"106","messageId":"107","endLine":142,"endColumn":17},{"ruleId":"130","severity":1,"message":"131","line":142,"column":50,"nodeType":"132","messageId":"133","endLine":142,"endColumn":52},{"ruleId":"113","severity":1,"message":"134","line":148,"column":6,"nodeType":"115","endLine":148,"endColumn":21,"suggestions":"135"},{"ruleId":"125","severity":1,"message":"126","line":151,"column":23,"nodeType":"127","messageId":"128","endLine":151,"endColumn":25},{"ruleId":"125","severity":1,"message":"136","line":153,"column":39,"nodeType":"127","messageId":"128","endLine":153,"endColumn":41},{"ruleId":"113","severity":1,"message":"137","line":157,"column":6,"nodeType":"115","endLine":157,"endColumn":27,"suggestions":"138"},{"ruleId":"125","severity":1,"message":"136","line":160,"column":23,"nodeType":"127","messageId":"128","endLine":160,"endColumn":25},{"ruleId":"113","severity":1,"message":"139","line":163,"column":6,"nodeType":"115","endLine":163,"endColumn":21,"suggestions":"140"},{"ruleId":"125","severity":1,"message":"136","line":186,"column":34,"nodeType":"127","messageId":"128","endLine":186,"endColumn":36},{"ruleId":"125","severity":1,"message":"126","line":260,"column":53,"nodeType":"127","messageId":"128","endLine":260,"endColumn":55},{"ruleId":"125","severity":1,"message":"136","line":316,"column":31,"nodeType":"127","messageId":"128","endLine":316,"endColumn":33},{"ruleId":"113","severity":1,"message":"141","line":26,"column":6,"nodeType":"115","endLine":26,"endColumn":26,"suggestions":"142"},{"ruleId":"113","severity":1,"message":"143","line":228,"column":6,"nodeType":"115","endLine":228,"endColumn":22,"suggestions":"144"},"no-native-reassign",["145"],"no-negated-in-lhs",["146"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","'button' is assigned a value but never used.","'Skills' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'logoInfo'. Either include it or remove the dependency array. If 'setLogos' needs the current value of 'logoInfo', you can also switch to useReducer instead of useState and read 'logoInfo' in the reducer.","ArrayExpression",["147"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute",["145"],["146"],"'FaYoutube' is defined but never used.","React Hook useEffect has missing dependencies: 'columnNames' and 'importedData'. Either include them or remove the dependency array.",["148"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'cols' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'importedData'. Either include it or remove the dependency array.",["149"],"Expected '===' and instead saw '=='.","React Hook useEffect has missing dependencies: 'groupByColumn' and 'importedData'. Either include them or remove the dependency array.",["150"],"React Hook useEffect has a missing dependency: 'importedData'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setGroupedColumnData' needs the current value of 'importedData'.",["151"],"React Hook useEffect has a missing dependency: 'someStateValue'. Either include it or remove the dependency array. You can also do a functional update 'setSomeStateValue(s => ...)' if you only need 'someStateValue' in the 'setSomeStateValue' call.",["152"],"React Hook useEffect has missing dependencies: 'constraints', 'firstBall', 'importedCircleData', 'largestCircle', 'maxRadius', 'scene', 'selectedColumn', and 'showCircleData'. Either include them or remove the dependency array. If 'showCircleData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["153"],"no-global-assign","no-unsafe-negation",{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},{"desc":"158","fix":"162"},{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},"Update the dependencies array to be: [logoInfo]",{"range":"167","text":"168"},"Update the dependencies array to be: [selectedColumn, dimensions, importedData, columnNames]",{"range":"169","text":"170"},"Update the dependencies array to be: [groupByColumn, importedData]",{"range":"171","text":"172"},"Update the dependencies array to be: [groupByColumn, importedData, selectedGroupColumn]",{"range":"173","text":"174"},{"range":"175","text":"172"},"Update the dependencies array to be: [importedCircleData, someStateValue]",{"range":"176","text":"177"},"Update the dependencies array to be: [constraints, firstBall, importedCircleData, largestCircle, maxRadius, scene, selectedColumn, showCircleData, someStateValue]",{"range":"178","text":"179"},[1275,1277],"[logoInfo]",[3495,3523],"[selectedColumn, dimensions, importedData, columnNames]",[4591,4606],"[groupByColumn, importedData]",[4836,4857],"[groupByColumn, importedData, selectedGroupColumn]",[4978,4993],[769,789],"[importedCircleData, someStateValue]",[6090,6106],"[constraints, firstBall, importedCircleData, largestCircle, maxRadius, scene, selectedColumn, showCircleData, someStateValue]"]