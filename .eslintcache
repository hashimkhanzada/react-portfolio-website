[{"C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\index.js":"1","C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\App.js":"2","C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\components\\index.js":"3","C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\components\\Navbar\\Navbar.js":"4","C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\components\\Navbar\\Navbar.elements.js":"5","C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\globalStyles.js":"6","C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\components\\Footer\\Footer.js":"7","C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\components\\InfoSection\\InfoSection.js":"8","C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\components\\InfoSection\\InfoSection.elements.js":"9","C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\components\\Footer\\Footer.elements.js":"10","C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\pages\\HomePage\\Home.js":"11","C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\pages\\HomePage\\Data.js":"12","C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\pages\\DataVisualizerPage\\DataViz.js":"13","C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\pages\\DataVisualizerPage\\ConvertedData.js":"14","C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\pages\\DataVisualizerPage\\SampleData.js":"15"},{"size":243,"mtime":1618795824180,"results":"16","hashOfConfig":"17"},{"size":586,"mtime":1618795967811,"results":"18","hashOfConfig":"17"},{"size":177,"mtime":1607260744787,"results":"19","hashOfConfig":"17"},{"size":2461,"mtime":1618973915943,"results":"20","hashOfConfig":"17"},{"size":3169,"mtime":1613562660395,"results":"21","hashOfConfig":"17"},{"size":1184,"mtime":1618126748866,"results":"22","hashOfConfig":"17"},{"size":181,"mtime":1607332809170,"results":"23","hashOfConfig":"17"},{"size":5699,"mtime":1621841432607,"results":"24","hashOfConfig":"17"},{"size":4002,"mtime":1617075053282,"results":"25","hashOfConfig":"17"},{"size":245,"mtime":1607332794393,"results":"26","hashOfConfig":"17"},{"size":566,"mtime":1618807486993,"results":"27","hashOfConfig":"17"},{"size":14376,"mtime":1621841545951,"results":"28","hashOfConfig":"17"},{"size":13118,"mtime":1616041776241,"results":"29","hashOfConfig":"17"},{"size":6464,"mtime":1615346425394,"results":"30","hashOfConfig":"17"},{"size":11005,"mtime":1615371576471,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"jlqu75",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\index.js",[],["66","67"],"C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\App.js",[],"C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\components\\index.js",[],"C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\components\\Navbar\\Navbar.js",["68"],"import React, { useState, useEffect } from \"react\";\r\nimport { FaBars, FaTimes, FaGithub, FaLinkedin } from \"react-icons/fa\";\r\nimport { IconContext } from \"react-icons/lib\";\r\nimport { HiOutlineMail } from \"react-icons/hi\";\r\n\r\nimport {\r\n  Nav,\r\n  NavbarContainer,\r\n  NavLogo,\r\n  NavIcon,\r\n  MobileIcon,\r\n  NavMenu,\r\n  NavItem,\r\n  SocialIconLink,\r\n} from \"./Navbar.elements\";\r\n\r\nfunction Navbar() {\r\n  const [click, setClick] = useState(false);\r\n  const [button, setButton] = useState(true);\r\n\r\n  const handleClick = () => setClick(!click);\r\n  const closeMobileMenu = () => setClick(false);\r\n\r\n  const showButton = () => {\r\n    if (window.innerWidth <= 960) {\r\n      setButton(false);\r\n    } else {\r\n      setButton(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    showButton();\r\n  }, []);\r\n\r\n  window.addEventListener(\"resize\", showButton);\r\n\r\n  return (\r\n    <>\r\n      <IconContext.Provider value={{ color: \"#fff\" }}>\r\n        <Nav>\r\n          <NavbarContainer>\r\n            <NavLogo to=\"/\" onClick={closeMobileMenu}>\r\n              <NavIcon />\r\n              HASHIM KHANZADA\r\n            </NavLogo>\r\n            <MobileIcon onClick={handleClick}>\r\n              {click ? <FaTimes /> : <FaBars />}\r\n            </MobileIcon>\r\n            <NavMenu onClick={handleClick} click={click}>\r\n              <NavItem>\r\n                <SocialIconLink\r\n                  href={\"https://github.com/hashimkhanzada\"}\r\n                  target=\"_blank\"\r\n                  aria-label=\"GitHub\"\r\n                  onClick={closeMobileMenu}\r\n                >\r\n                  <FaGithub />\r\n                </SocialIconLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <SocialIconLink\r\n                  href={\"https://www.linkedin.com/in/hashim-khanzada/\"}\r\n                  target=\"_blank\"\r\n                  aria-label=\"GitHub\"\r\n                  onClick={closeMobileMenu}\r\n                >\r\n                  <FaLinkedin />\r\n                </SocialIconLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <SocialIconLink\r\n                  href={\"mailto:hashimkhanzada@gmail.com\"}\r\n                  aria-label=\"Email\"\r\n                  onClick={closeMobileMenu}\r\n                >\r\n                  <HiOutlineMail />\r\n                </SocialIconLink>\r\n              </NavItem>\r\n            </NavMenu>\r\n          </NavbarContainer>\r\n        </Nav>\r\n      </IconContext.Provider>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\components\\Navbar\\Navbar.elements.js",[],"C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\globalStyles.js",[],"C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\components\\Footer\\Footer.js",[],"C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\components\\InfoSection\\InfoSection.js",["69"],"C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\components\\InfoSection\\InfoSection.elements.js",[],"C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\components\\Footer\\Footer.elements.js",[],"C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\pages\\HomePage\\Home.js",[],"C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\pages\\HomePage\\Data.js",[],"C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\pages\\DataVisualizerPage\\DataViz.js",["70","71","72","73","74"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport { parse } from \"papaparse\";\r\nimport styled from \"styled-components\";\r\nimport { ConvertedData } from \"./ConvertedData\";\r\nimport { Button } from \"../../globalStyles\";\r\nimport \"./DataViz.css\";\r\nimport SampleData from \"./SampleData\";\r\n\r\nconst DataViz = () => {\r\n  const dataRef = useRef(null);\r\n  const [dimensions, setDimensions] = useState();\r\n  const [highlighted, setHighlighted] = useState(false);\r\n  const [columnNames, setColumnNames] = useState([]);\r\n  const [numberColumnNames, setNumberColumnNames] = useState([]);\r\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\r\n  const [importedData, setImportedData] = useState([]);\r\n  const [largestCircle, setLargestCircle] = useState(0);\r\n  const [isNumberColumn, setIsNumberColumn] = useState(false);\r\n  const [largestRadius, setLargestRadius] = useState(0);\r\n  const [bodyInfo, setBodyInfo] = useState();\r\n  const [introData, setIntroData] = useState(\r\n    \"A basic data visualizer that converts data from a .CSV file and displays them as movable objects.\"\r\n  );\r\n  const [groupByColumn, setGroupByColumn] = useState();\r\n  const [groupedColumnNames, setGroupedColumnNames] = useState([]);\r\n  const [selectedGroupColumn, setSelectedGroupColumn] = useState();\r\n  const [groupedColumnData, setGroupedColumnData] = useState();\r\n\r\n  useEffect(() => {\r\n    let dimen = dataRef.current.getBoundingClientRect();\r\n    setDimensions({ width: dimen.width, height: dimen.height });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (importedData.length > 0) {\r\n      const keys = Object.keys(importedData[0]);\r\n      setColumnNames(keys);\r\n\r\n      let names = [...keys];\r\n\r\n      importedData.forEach((element) => {\r\n        Object.keys(element).forEach((key) => {\r\n          if (isNaN(element[key])) {\r\n            if (names.includes(key)) {\r\n              const index = names.indexOf(key);\r\n              if (index > -1) {\r\n                names.splice(index, 1);\r\n              }\r\n            }\r\n          }\r\n        });\r\n      });\r\n\r\n      setNumberColumnNames(names);\r\n    }\r\n  }, [importedData]);\r\n\r\n  useEffect(() => {\r\n    if (dimensions && importedData) {\r\n      let addArray = [];\r\n      let largestNum = Math.max.apply(\r\n        Math,\r\n        importedData.map((o) => {\r\n          addArray.push(Math.floor(o[selectedColumn]));\r\n          return o[selectedColumn];\r\n        })\r\n      );\r\n      let sum = addArray.reduce((a, b) => a + b, 0);\r\n      let multi = 1.2;\r\n      let maxRadius = 170;\r\n\r\n      if (window.innerWidth < 1100) {\r\n        multi = 1.7;\r\n      }\r\n\r\n      let allowedRad = Math.floor(\r\n        (dimensions.width + dimensions.height) / multi\r\n      );\r\n      let totalRad = Math.floor((sum / largestNum) * maxRadius);\r\n\r\n      while (totalRad > allowedRad) {\r\n        maxRadius -= 2;\r\n        totalRad = Math.floor((sum / largestNum) * maxRadius);\r\n      }\r\n\r\n      setLargestRadius(maxRadius);\r\n      setIsNumberColumn(false);\r\n\r\n      if (Number.isInteger(Math.floor(largestNum))) {\r\n        setIsNumberColumn(true);\r\n        setIntroData(\"Click on an object to display related data\");\r\n      } else {\r\n        setBodyInfo(\"\");\r\n      }\r\n\r\n      setLargestCircle(largestNum);\r\n    }\r\n\r\n    if (selectedColumn) {\r\n      let tempArr = [...columnNames];\r\n      tempArr.sort();\r\n      const index = tempArr.indexOf(selectedColumn);\r\n      let item = tempArr.splice(index, 1);\r\n      tempArr.splice(0, 0, item[0]);\r\n\r\n      setColumnNames(tempArr);\r\n    }\r\n  }, [selectedColumn, dimensions]);\r\n\r\n  const displayData = (b) => {\r\n    setBodyInfo(b);\r\n  };\r\n\r\n  const convertFiles = (x) => {\r\n    setHighlighted(false);\r\n\r\n    Array.from(x)\r\n      .filter((file) => file.type === \"application/vnd.ms-excel\")\r\n      .forEach(async (file) => {\r\n        const text = await file.text();\r\n\r\n        const result = parse(text, {\r\n          header: true,\r\n          skipEmptyLines: true,\r\n          preview: 70,\r\n        });\r\n\r\n        setImportedData(result.data);\r\n        setIntroData(\r\n          \"Only columns that contain numbers can be displayed as objects. Refresh the page if any performance issues occur.\"\r\n        );\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (groupByColumn && groupByColumn !== \"AllData\") {\r\n      let group = importedData.reduce((r, a) => {\r\n        r[a[groupByColumn]] = [...(r[a[groupByColumn]] || []), a];\r\n        return r;\r\n      }, {});\r\n      let nameOfColumns = [];\r\n      Object.keys(group).map((item) => {\r\n        nameOfColumns.push(item);\r\n      });\r\n\r\n      setGroupedColumnNames(nameOfColumns);\r\n    }\r\n  }, [groupByColumn]);\r\n\r\n  useEffect(() => {\r\n    if (groupByColumn !== \"AllData\") {\r\n      const result = importedData.filter(\r\n        (word) => word[groupByColumn] === selectedGroupColumn\r\n      );\r\n      setGroupedColumnData(result);\r\n    }\r\n  }, [selectedGroupColumn]);\r\n\r\n  useEffect(() => {\r\n    if (groupByColumn === \"AllData\") {\r\n      setGroupedColumnData(importedData);\r\n    }\r\n  }, [groupByColumn]);\r\n\r\n  return (\r\n    <MainContainer\r\n      onDragOver={(e) => {\r\n        e.preventDefault();\r\n      }}\r\n      onDrop={(e) => {\r\n        e.preventDefault();\r\n        convertFiles(e.dataTransfer.files);\r\n      }}\r\n    >\r\n      <LeftColumn\r\n        highlighted={highlighted}\r\n        onDragEnter={() => {\r\n          setHighlighted(true);\r\n        }}\r\n        onDragLeave={() => {\r\n          setHighlighted(false);\r\n        }}\r\n      >\r\n        <BodyContainer>\r\n          <SelectBlock>\r\n            {importedData.length === 0 && (\r\n              <>\r\n                <input\r\n                  type=\"file\"\r\n                  onChange={(e) => {\r\n                    convertFiles(e.target.files);\r\n                  }}\r\n                  style={{\r\n                    marginBottom: \"20px\",\r\n                    borderRadius: \"5px\",\r\n                    width: \"100%\",\r\n                  }}\r\n                />\r\n                <Button\r\n                  primary\r\n                  fontBig\r\n                  onClick={() => {\r\n                    setImportedData(SampleData);\r\n                    // console.log(SampleData);\r\n                    setIntroData(\r\n                      \"Only columns that contain numbers can be displayed as objects. Refresh the page if any performance issues occur.\"\r\n                    );\r\n                  }}\r\n                  style={{\r\n                    marginBottom: \"20px\",\r\n                  }}\r\n                >\r\n                  Load Sample Data\r\n                </Button>\r\n              </>\r\n            )}\r\n            {importedData.length > 0 && (\r\n              <>\r\n                <SelectInput\r\n                  style={{ width: \"100%\" }}\r\n                  onChange={(e) => {\r\n                    setSelectedColumn(e.target.value);\r\n                    setGroupByColumn(\"AllData\");\r\n                  }}\r\n                >\r\n                  <option value=\"\" defaultValue>\r\n                    - select a column to display -\r\n                  </option>\r\n                  {numberColumnNames &&\r\n                    numberColumnNames.map((data) => {\r\n                      return (\r\n                        <option key={data} value={data}>\r\n                          {data}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </SelectInput>\r\n                {selectedColumn && (\r\n                  <>\r\n                    <SelectInput\r\n                      key={selectedColumn}\r\n                      style={{ width: \"100%\" }}\r\n                      onChange={(e) => {\r\n                        setGroupByColumn(e.target.value);\r\n                      }}\r\n                    >\r\n                      <option value=\"\" defaultValue>\r\n                        - select a column to group by -\r\n                      </option>\r\n                      <option value=\"AllData\">Show All</option>\r\n                      {columnNames &&\r\n                        columnNames.map((data) => {\r\n                          return (\r\n                            <option key={data} value={data}>\r\n                              {data}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                    </SelectInput>\r\n                    {groupByColumn && groupByColumn !== \"AllData\" && (\r\n                      <SelectInput\r\n                        style={{ width: \"100%\" }}\r\n                        onChange={(e) => {\r\n                          setSelectedGroupColumn(e.target.value);\r\n                        }}\r\n                      >\r\n                        <option value=\"\" defaultValue>\r\n                          - Select the {groupByColumn} -\r\n                        </option>\r\n\r\n                        {groupedColumnNames &&\r\n                          groupedColumnNames.map((group) => {\r\n                            return (\r\n                              <option key={group} value={group}>\r\n                                {group}\r\n                              </option>\r\n                            );\r\n                          })}\r\n                      </SelectInput>\r\n                    )}\r\n                  </>\r\n                )}\r\n              </>\r\n            )}\r\n          </SelectBlock>\r\n\r\n          <BodyData className=\"scrollBar\">\r\n            {bodyInfo ? (\r\n              columnNames?.map((data) => {\r\n                return (\r\n                  <BodyItem key={data}>\r\n                    <h4>{data}:</h4>\r\n                    <p>{bodyInfo[data]}</p>\r\n                  </BodyItem>\r\n                );\r\n              })\r\n            ) : (\r\n              <BodyItem>\r\n                <p>{introData}</p>\r\n              </BodyItem>\r\n            )}\r\n          </BodyData>\r\n        </BodyContainer>\r\n      </LeftColumn>\r\n      <RightColumn ref={dataRef}>\r\n        {groupedColumnData?.length > 0 && isNumberColumn ? (\r\n          <ConvertedData\r\n            key={\r\n              groupedColumnData[0][groupByColumn] +\r\n              selectedColumn +\r\n              groupedColumnData\r\n            }\r\n            circleData={groupedColumnData}\r\n            largestCircle={largestCircle}\r\n            selectedColumn={selectedColumn}\r\n            maxRadius={largestRadius}\r\n            showCircleData={displayData}\r\n          />\r\n        ) : (\r\n          importedData.length === 0 && (\r\n            <h1\r\n              style={{ color: \"gray\", textAlign: \"center\", marginTop: \"2vh\" }}\r\n            >\r\n              Drag and Drop a .CSV file\r\n            </h1>\r\n          )\r\n        )}\r\n      </RightColumn>\r\n    </MainContainer>\r\n  );\r\n};\r\n\r\nexport default DataViz;\r\n\r\nconst MainContainer = styled.div`\r\n  display: flex;\r\n  height: calc(100vh - 80px);\r\n  background-color: #4b59f7;\r\n  width: 100%;\r\n  color: white;\r\n\r\n  @media screen and (max-width: 1100px) {\r\n    flex-direction: column;\r\n    height: 100%;\r\n  }\r\n`;\r\n\r\nconst RightColumn = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex: 0.75;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: #fff;\r\n`;\r\n\r\nconst LeftColumn = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex: 0.25;\r\n  background-color: ${({ highlighted }) =>\r\n    highlighted ? \"#4C5D6B\" : \"#3b4954\"};\r\n`;\r\n\r\nconst SelectBlock = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  margin: 15px 20px;\r\n`;\r\n\r\nconst SelectInput = styled.select`\r\n  color: #a0b0bb;\r\n  background-color: #3b4954;\r\n  text-transform: capitalize;\r\n  font-size: 22px;\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n\r\n  option {\r\n    color: #fff;\r\n  }\r\n  &:focus {\r\n    outline-width: 0;\r\n  }\r\n`;\r\n\r\nconst BodyContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: left;\r\n  overflow: hidden;\r\n\r\n  @media screen and (max-width: 1100px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst BodyData = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: left;\r\n  overflow-y: auto;\r\n\r\n  @media screen and (max-width: 1100px) {\r\n    flex-direction: row;\r\n    overflow-x: auto;\r\n    overflow-y: hidden;\r\n    height: 100%;\r\n    margin-bottom: 20px;\r\n  }\r\n`;\r\n\r\nconst BodyItem = styled.div`\r\n  padding: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: left;\r\n  border-top: solid 1px #2a343c;\r\n\r\n  &:first-child {\r\n    border-top: solid 1px #4b59f7;\r\n    background-color: #4b59f7;\r\n\r\n    &:hover {\r\n      transition: all 0.3s ease-out;\r\n      background: #0467fb;\r\n    }\r\n  }\r\n\r\n  &:nth-child(2) {\r\n    border-top: solid 1px #4b59f7;\r\n    @media screen and (max-width: 1100px) {\r\n      border-top: solid 1px #2a343c;\r\n    }\r\n  }\r\n\r\n  &:hover {\r\n    transition: all 0.3s ease-out;\r\n    background: #2a343c;\r\n  }\r\n\r\n  h4 {\r\n    font-size: 22px;\r\n    font-weight: normal;\r\n    text-transform: capitalize;\r\n    margin-bottom: 4px;\r\n    @media screen and (max-width: 1100px) {\r\n      margin-top: 5px;\r\n    }\r\n  }\r\n\r\n  p {\r\n    font-size: 17px;\r\n    align-self: right;\r\n  }\r\n\r\n  @media screen and (max-width: 1100px) {\r\n    flex-direction: column;\r\n    justify-content: normal;\r\n    border-right: solid 1px #2a343c;\r\n    padding: 10px 25px;\r\n    border-bottom: solid 1px #2a343c;\r\n  }\r\n`;\r\n","C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\pages\\DataVisualizerPage\\ConvertedData.js",["75","76"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport Matter from \"matter-js\";\r\nimport MatterAttractors from \"matter-attractors\";\r\n\r\nconst PARTICLE_BOUNCYNESS = 0.1;\r\n\r\nexport const ConvertedData = ({\r\n  circleData,\r\n  largestCircle,\r\n  selectedColumn,\r\n  maxRadius,\r\n  showCircleData,\r\n}) => {\r\n  const [importedCircleData] = useState(circleData);\r\n  const boxRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n  const [constraints, setContraints] = useState();\r\n  const [scene, setScene] = useState();\r\n  const [someStateValue, setSomeStateValue] = useState(false);\r\n  const [firstBall, setFirstBall] = useState(false);\r\n\r\n  useEffect(() => {\r\n    importedCircleData.forEach((element) => {\r\n      setSomeStateValue(!someStateValue);\r\n    });\r\n  }, [importedCircleData]);\r\n\r\n  useEffect(() => {\r\n    let Engine = Matter.Engine;\r\n    let Render = Matter.Render;\r\n    let World = Matter.World;\r\n    let Bodies = Matter.Bodies;\r\n    let engine = Engine.create({});\r\n\r\n    Matter.use(MatterAttractors);\r\n\r\n    let render = Render.create({\r\n      element: boxRef.current,\r\n      engine: engine,\r\n      canvas: canvasRef.current,\r\n      options: {\r\n        background: \"white\",\r\n        wireframes: false,\r\n      },\r\n    });\r\n\r\n    const floor = Bodies.rectangle(0, 0, 10, 10, {\r\n      isStatic: true,\r\n      render: {\r\n        visible: false,\r\n      },\r\n    });\r\n\r\n    World.add(engine.world, [\r\n      floor,\r\n      Bodies.rectangle(0, 0, 10, 10, {\r\n        isStatic: true,\r\n        render: {\r\n          visible: false,\r\n        },\r\n      }),\r\n      Bodies.rectangle(0, 0, 10, 10, {\r\n        isStatic: true,\r\n        render: {\r\n          visible: false,\r\n        },\r\n      }),\r\n      Bodies.rectangle(0, 0, 10, 10, {\r\n        isStatic: true,\r\n        render: {\r\n          visible: false,\r\n        },\r\n      }),\r\n    ]);\r\n    Engine.run(engine);\r\n    Render.run(render);\r\n\r\n    setContraints(boxRef.current.getBoundingClientRect());\r\n    setScene(render);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (constraints) {\r\n      let { width, height } = constraints;\r\n\r\n      scene.bounds.max.x = width;\r\n      scene.bounds.max.y = height;\r\n      scene.options.width = width;\r\n      scene.options.height = height;\r\n      scene.canvas.width = width;\r\n      scene.canvas.height = height;\r\n\r\n      const floor = scene.engine.world.bodies[0];\r\n      const roof = scene.engine.world.bodies[1];\r\n      const rightWall = scene.engine.world.bodies[2];\r\n      const leftWall = scene.engine.world.bodies[3];\r\n\r\n      Matter.Body.setPosition(floor, {\r\n        x: width / 2,\r\n        y: height,\r\n      });\r\n\r\n      Matter.Body.setPosition(roof, {\r\n        x: width / 2,\r\n        y: height - height,\r\n      });\r\n\r\n      Matter.Body.setPosition(rightWall, {\r\n        x: width,\r\n        y: height / 2,\r\n      });\r\n\r\n      Matter.Body.setPosition(leftWall, {\r\n        x: width - width,\r\n        y: height / 2,\r\n      });\r\n\r\n      Matter.Body.setVertices(floor, [\r\n        { x: 0, y: height },\r\n        { x: width, y: height },\r\n        { x: width, y: height + 1 },\r\n        { x: 0, y: height + 1 },\r\n      ]);\r\n\r\n      Matter.Body.setVertices(roof, [\r\n        { x: 0, y: height },\r\n        { x: width, y: height },\r\n        { x: width, y: height + 1 },\r\n        { x: 0, y: height + 1 },\r\n      ]);\r\n\r\n      Matter.Body.setVertices(leftWall, [\r\n        { x: 0, y: 0 },\r\n        { x: 1, y: 0 },\r\n        { x: 1, y: height },\r\n        { x: 0, y: height },\r\n      ]);\r\n\r\n      Matter.Body.setVertices(rightWall, [\r\n        { x: 0, y: 0 },\r\n        { x: 1, y: 0 },\r\n        { x: 1, y: height },\r\n        { x: 0, y: height },\r\n      ]);\r\n\r\n      scene.engine.world.gravity.x = 0;\r\n      scene.engine.world.gravity.y = 0;\r\n      scene.engine.world.gravity.isPoint = true;\r\n    }\r\n  }, [scene, constraints]);\r\n\r\n  useEffect(() => {\r\n    if (scene) {\r\n      let { width, height } = constraints;\r\n      let centerX = width / 2;\r\n      let centerY = height / 2;\r\n\r\n      if (!firstBall) {\r\n        let attractiveBody = Matter.Bodies.circle(centerX, centerY, 0, {\r\n          isStatic: true,\r\n          restitution: PARTICLE_BOUNCYNESS,\r\n          plugin: {\r\n            attractors: [\r\n              (bodyA, bodyB) => {\r\n                return {\r\n                  x: (bodyA.position.x - bodyB.position.x) * 1e-6,\r\n                  y: (bodyA.position.y - bodyB.position.y) * 1e-6,\r\n                };\r\n              },\r\n            ],\r\n          },\r\n        });\r\n\r\n        Matter.World.add(scene.engine.world, attractiveBody);\r\n\r\n        setFirstBall(true);\r\n      }\r\n\r\n      importedCircleData.forEach((element) => {\r\n        if (element[selectedColumn]) {\r\n          let value = Math.max(0, element[selectedColumn]);\r\n\r\n          let randomX = Math.floor(Math.random() * -width) + width;\r\n          let randomY = Math.floor(Math.random() * -height) + height;\r\n\r\n          let bodySize = Math.floor((value / largestCircle) * maxRadius);\r\n\r\n          let normalBody = Matter.Bodies.circle(randomX, randomY, bodySize, {\r\n            label: element,\r\n            restitution: PARTICLE_BOUNCYNESS,\r\n          });\r\n\r\n          Matter.World.add(scene.engine.world, normalBody);\r\n        }\r\n      });\r\n\r\n      scene.mouse = Matter.Mouse.create(scene.canvas);\r\n      let mouseInteractivity = Matter.MouseConstraint.create(scene.engine, {\r\n        mouse: scene.mouse,\r\n        constraint: {\r\n          stiffness: 0.2,\r\n          render: { visible: false },\r\n        },\r\n      });\r\n\r\n      Matter.World.add(scene.engine.world, mouseInteractivity);\r\n\r\n      Matter.Events.on(mouseInteractivity, \"mousedown\", (event) => {\r\n        let mouseConstraint = event.source;\r\n        let bodies = scene.engine.world.bodies;\r\n\r\n        if (!mouseConstraint.bodyB) {\r\n          for (let i = 0; i < bodies.length; i++) {\r\n            let body = bodies[i];\r\n            if (\r\n              Matter.Bounds.contains(\r\n                body.bounds,\r\n                mouseConstraint.mouse.position\r\n              )\r\n            ) {\r\n              showCircleData(body?.label);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }, [someStateValue]);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        position: \"relative\",\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n      }}\r\n    >\r\n      <div\r\n        ref={boxRef}\r\n        style={{\r\n          width: \"100%\",\r\n          height: \"100%\",\r\n        }}\r\n      >\r\n        <canvas ref={canvasRef} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\hashim khanzada\\react-website-portfolio\\src\\pages\\DataVisualizerPage\\SampleData.js",[],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":19,"column":10,"nodeType":"83","messageId":"84","endLine":19,"endColumn":16},{"ruleId":"85","severity":1,"message":"86","line":69,"column":6,"nodeType":"87","endLine":69,"endColumn":8,"suggestions":"88"},{"ruleId":"85","severity":1,"message":"89","line":108,"column":6,"nodeType":"87","endLine":108,"endColumn":34,"suggestions":"90"},{"ruleId":"91","severity":1,"message":"92","line":142,"column":37,"nodeType":"93","messageId":"94","endLine":142,"endColumn":39},{"ruleId":"85","severity":1,"message":"95","line":148,"column":6,"nodeType":"87","endLine":148,"endColumn":21,"suggestions":"96"},{"ruleId":"85","severity":1,"message":"97","line":157,"column":6,"nodeType":"87","endLine":157,"endColumn":27,"suggestions":"98"},{"ruleId":"85","severity":1,"message":"99","line":163,"column":6,"nodeType":"87","endLine":163,"endColumn":21,"suggestions":"100"},{"ruleId":"85","severity":1,"message":"101","line":26,"column":6,"nodeType":"87","endLine":26,"endColumn":26,"suggestions":"102"},{"ruleId":"85","severity":1,"message":"103","line":228,"column":6,"nodeType":"87","endLine":228,"endColumn":22,"suggestions":"104"},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"no-unused-vars","'button' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'logoInfo'. Either include it or remove the dependency array. If 'setLogos' needs the current value of 'logoInfo', you can also switch to useReducer instead of useState and read 'logoInfo' in the reducer.","ArrayExpression",["107"],"React Hook useEffect has missing dependencies: 'columnNames' and 'importedData'. Either include them or remove the dependency array.",["108"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'importedData'. Either include it or remove the dependency array.",["109"],"React Hook useEffect has missing dependencies: 'groupByColumn' and 'importedData'. Either include them or remove the dependency array.",["110"],"React Hook useEffect has a missing dependency: 'importedData'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setGroupedColumnData' needs the current value of 'importedData'.",["111"],"React Hook useEffect has a missing dependency: 'someStateValue'. Either include it or remove the dependency array. You can also do a functional update 'setSomeStateValue(s => ...)' if you only need 'someStateValue' in the 'setSomeStateValue' call.",["112"],"React Hook useEffect has missing dependencies: 'constraints', 'firstBall', 'importedCircleData', 'largestCircle', 'maxRadius', 'scene', 'selectedColumn', and 'showCircleData'. Either include them or remove the dependency array. If 'showCircleData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["113"],"no-global-assign","no-unsafe-negation",{"desc":"114","fix":"115"},{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},{"desc":"118","fix":"122"},{"desc":"123","fix":"124"},{"desc":"125","fix":"126"},"Update the dependencies array to be: [logoInfo]",{"range":"127","text":"128"},"Update the dependencies array to be: [selectedColumn, dimensions, importedData, columnNames]",{"range":"129","text":"130"},"Update the dependencies array to be: [groupByColumn, importedData]",{"range":"131","text":"132"},"Update the dependencies array to be: [groupByColumn, importedData, selectedGroupColumn]",{"range":"133","text":"134"},{"range":"135","text":"132"},"Update the dependencies array to be: [importedCircleData, someStateValue]",{"range":"136","text":"137"},"Update the dependencies array to be: [constraints, firstBall, importedCircleData, largestCircle, maxRadius, scene, selectedColumn, showCircleData, someStateValue]",{"range":"138","text":"139"},[1214,1216],"[logoInfo]",[3495,3523],"[selectedColumn, dimensions, importedData, columnNames]",[4579,4594],"[groupByColumn, importedData]",[4826,4847],"[groupByColumn, importedData, selectedGroupColumn]",[4969,4984],[769,789],"[importedCircleData, someStateValue]",[6109,6125],"[constraints, firstBall, importedCircleData, largestCircle, maxRadius, scene, selectedColumn, showCircleData, someStateValue]"]